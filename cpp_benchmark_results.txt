warning: variable `total_bytes` is assigned to, but never used
   --> src/concurrency/async_blob_store.rs:188:17
    |
188 |         let mut total_bytes = 0;
    |                 ^^^^^^^^^^^
    |
    = note: consider using `_total_bytes` instead
    = note: `#[warn(unused_variables)]` on by default

warning: variable `total_bytes` is assigned to, but never used
   --> src/concurrency/async_blob_store.rs:211:17
    |
211 |         let mut total_bytes = 0;
    |                 ^^^^^^^^^^^
    |
    = note: consider using `_total_bytes` instead

warning: variable `misses` is assigned to, but never used
   --> src/concurrency/async_blob_store.rs:212:17
    |
212 |         let mut misses = 0;
    |                 ^^^^^^
    |
    = note: consider using `_misses` instead

warning: value assigned to `misses` is never read
   --> src/concurrency/async_blob_store.rs:223:25
    |
223 |                         misses += 1;
    |                         ^^^^^^
    |
    = help: maybe it is overwritten before being read?
    = note: `#[warn(unused_assignments)]` on by default

warning: type `HuffmanNode` is more private than the item `HuffmanTree::root`
   --> src/entropy/huffman.rs:165:5
    |
165 |     pub fn root(&self) -> Option<&HuffmanNode> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^ method `HuffmanTree::root` is reachable at visibility `pub`
    |
note: but type `HuffmanNode` is only usable at visibility `pub(self)`
   --> src/entropy/huffman.rs:12:1
    |
12  | enum HuffmanNode {
    | ^^^^^^^^^^^^^^^^
    = note: `#[warn(private_interfaces)]` on by default

warning: method `decompress_data` is never used
   --> src/blob_store/entropy.rs:143:8
    |
86  | impl<S: BlobStore> HuffmanBlobStore<S> {
    | -------------------------------------- method in this implementation
...
143 |     fn decompress_data(&mut self, compressed: &[u8], original_length: usize) -> Result<Vec<u8>> {
    |        ^^^^^^^^^^^^^^^
    |
    = note: `#[warn(dead_code)]` on by default

warning: methods `has_children` and `remove_child` are never used
  --> src/fsa/patricia_trie.rs:68:8
   |
35 | impl PatriciaNode {
   | ----------------- methods in this implementation
...
68 |     fn has_children(&self) -> bool {
   |        ^^^^^^^^^^^^
...
83 |     fn remove_child(&mut self, first_byte: u8) -> Option<usize> {
   |        ^^^^^^^^^^^^

warning: method `calculate_max_depth` is never used
   --> src/fsa/patricia_trie.rs:328:8
    |
124 | impl PatriciaTrie {
    | ----------------- method in this implementation
...
328 |     fn calculate_max_depth(&self, node_idx: usize) -> usize {
    |        ^^^^^^^^^^^^^^^^^^^

warning: field `cumulative` is never read
   --> src/entropy/rans.rs:170:5
    |
168 | pub struct RansDecoder {
    |            ----------- field in this struct
169 |     symbols: [RansSymbol; 256],
170 |     cumulative: [u32; 257],
    |     ^^^^^^^^^^
    |
    = note: `RansDecoder` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: field `capacity` is never read
   --> src/memory/pool.rs:390:5
    |
387 | pub struct PooledBuffer {
    |            ------------ field in this struct
...
390 |     capacity: usize,
    |     ^^^^^^^^

warning: field `allocator` is never read
   --> src/memory/bump.rs:265:5
    |
261 | pub struct BumpVec<'a, T> {
    |            ------- field in this struct
...
265 |     allocator: &'a BumpAllocator,
    |     ^^^^^^^^^

warning: fields `size` and `page_size` are never read
  --> src/memory/hugepage.rs:46:5
   |
44 | struct HugePageAllocation {
   |        ------------------ fields in this struct
45 |     ptr: *mut u8,
46 |     size: usize,
   |     ^^^^
47 |     page_size: usize,
   |     ^^^^^^^^^

warning: fields `file_path` and `created_at` are never read
   --> src/concurrency/async_blob_store.rs:252:5
    |
250 | struct FileMetadata {
    |        ------------ fields in this struct
251 |     size: usize,
252 |     file_path: PathBuf,
    |     ^^^^^^^^^
253 |     created_at: Instant,
    |     ^^^^^^^^^^
    |
    = note: `FileMetadata` has a derived impl for the trait `Clone`, but this is intentionally ignored during dead code analysis

warning: field `queue` is never read
   --> src/concurrency/work_stealing.rs:244:5
    |
241 | struct WorkerThread {
    |        ------------ field in this struct
...
244 |     queue: Arc<WorkStealingQueue>,
    |     ^^^^^

warning: fields `timestamp` and `data_hash` are never read
  --> src/compression/adaptive.rs:70:5
   |
65 | struct PerformanceMeasurement {
   |        ---------------------- fields in this struct
...
70 |     timestamp: Instant,
   |     ^^^^^^^^^
71 |     data_hash: u64, // Simple hash to identify data patterns
   |     ^^^^^^^^^
   |
   = note: `PerformanceMeasurement` has derived impls for the traits `Clone` and `Debug`, but these are intentionally ignored during dead code analysis

warning: method `switch_algorithm` is never used
   --> src/compression/adaptive.rs:359:8
    |
110 | impl AdaptiveCompressor {
    | ----------------------- method in this implementation
...
359 |     fn switch_algorithm(&mut self, algorithm: Algorithm) -> Result<()> {
    |        ^^^^^^^^^^^^^^^^

warning: missing documentation for a variant
   --> src/blob_store/compressed.rs:388:5
    |
388 |     Zstd { level: i32 },
    |     ^^^^
    |
note: the lint level is defined here
   --> src/lib.rs:64:9
    |
64  | #![warn(missing_docs)]
    |         ^^^^^^^^^^^^

warning: missing documentation for a struct field
   --> src/blob_store/compressed.rs:388:12
    |
388 |     Zstd { level: i32 },
    |            ^^^^^^^^^^

warning: missing documentation for a variant
   --> src/blob_store/compressed.rs:391:5
    |
391 |     None,
    |     ^^^^

warning: missing documentation for an associated function
  --> src/concurrency/mod.rs:34:5
   |
34 |     pub fn new() -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
  --> src/concurrency/fiber_pool.rs:68:5
   |
68 |     pub fn new(handle: JoinHandle<Result<T>>, id: u64) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
   --> src/concurrency/fiber_pool.rs:353:5
    |
353 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
   --> src/concurrency/fiber_pool.rs:359:5
    |
359 |     pub fn max_fibers(mut self, max_fibers: usize) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
   --> src/concurrency/fiber_pool.rs:364:5
    |
364 |     pub fn initial_workers(mut self, initial_workers: usize) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
   --> src/concurrency/fiber_pool.rs:369:5
    |
369 |     pub fn max_workers(mut self, max_workers: usize) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
   --> src/concurrency/fiber_pool.rs:374:5
    |
374 |     pub fn queue_capacity(mut self, queue_capacity: usize) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
   --> src/concurrency/fiber_pool.rs:379:5
    |
379 |     pub fn idle_timeout(mut self, idle_timeout: Duration) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
   --> src/concurrency/fiber_pool.rs:384:5
    |
384 |     pub fn build(self) -> Result<FiberPool> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
   --> src/concurrency/pipeline.rs:540:5
    |
540 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
   --> src/concurrency/pipeline.rs:546:5
    |
546 |     pub fn buffer_size(mut self, buffer_size: usize) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
   --> src/concurrency/pipeline.rs:551:5
    |
551 |     pub fn max_in_flight(mut self, max_in_flight: usize) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
   --> src/concurrency/pipeline.rs:556:5
    |
556 |     pub fn stage_timeout(mut self, stage_timeout: Duration) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
   --> src/concurrency/pipeline.rs:561:5
    |
561 |     pub fn enable_batching(mut self, enable: bool) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
   --> src/concurrency/pipeline.rs:566:5
    |
566 |     pub fn batch_size(mut self, batch_size: usize) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
   --> src/concurrency/pipeline.rs:571:5
    |
571 |     pub fn batch_timeout(mut self, batch_timeout: Duration) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
   --> src/concurrency/pipeline.rs:576:5
    |
576 |     pub fn build(self) -> Pipeline {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
   --> src/concurrency/pipeline.rs:679:5
    |
679 |     pub fn new(name: String, func: F) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
   --> src/concurrency/pipeline.rs:707:5
    |
707 |     pub fn new(name: String, predicate: F) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
  --> src/concurrency/async_blob_store.rs:16:1
   |
16 | #[async_trait::async_trait]
   | ^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
  --> src/concurrency/work_stealing.rs:48:5
   |
48 |     pub fn new(closure: F) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
  --> src/concurrency/work_stealing.rs:57:5
   |
57 |     pub fn with_priority(mut self, priority: u8) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
  --> src/concurrency/work_stealing.rs:62:5
   |
62 |     pub fn with_stealable(mut self, stealable: bool) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
  --> src/concurrency/work_stealing.rs:67:5
   |
67 |     pub fn with_estimated_duration(mut self, duration: Duration) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
   --> src/concurrency/work_stealing.rs:107:5
    |
107 |     pub fn new(worker_id: usize, capacity: usize) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: creating a shared reference to mutable static
   --> src/concurrency/work_stealing.rs:507:24
    |
507 |         while unsafe { GLOBAL_EXECUTOR.is_none() } {
    |                        ^^^^^^^^^^^^^^^^^^^^^^^^^ shared reference to mutable static
    |
    = note: for more information, see <https://doc.rust-lang.org/nightly/edition-guide/rust-2024/static-mut-references.html>
    = note: shared references to mutable statics are dangerous; it's undefined behavior if the static is mutated or if a mutable reference is created for it while the shared reference lives
    = note: `#[warn(static_mut_refs)]` on by default

warning: missing documentation for an associated function
   --> src/compression/mod.rs:265:5
    |
265 |     pub fn new(level: i32) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
   --> src/compression/mod.rs:293:5
    |
293 |     pub fn new(training_data: &[u8]) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
   --> src/compression/mod.rs:378:5
    |
378 |     pub fn new(training_data: &[u8]) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
   --> src/compression/mod.rs:478:5
    |
478 |     pub fn new(training_data: &[u8]) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
   --> src/compression/mod.rs:523:5
    |
523 |     pub fn new(training_data: &[u8]) -> Result<Self> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
  --> src/compression/adaptive.rs:53:5
   |
53 |     pub fn new(data_type: String, algorithm: Algorithm) -> Self {
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for an associated function
   --> src/compression/realtime.rs:326:5
    |
326 |     pub fn new() -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
   --> src/compression/realtime.rs:332:5
    |
332 |     pub fn mode(mut self, mode: CompressionMode) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
   --> src/compression/realtime.rs:337:5
    |
337 |     pub fn max_concurrent(mut self, max_concurrent: usize) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
   --> src/compression/realtime.rs:342:5
    |
342 |     pub fn enable_deadlines(mut self, enable: bool) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
   --> src/compression/realtime.rs:347:5
    |
347 |     pub fn fallback_on_timeout(mut self, fallback: bool) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
   --> src/compression/realtime.rs:352:5
    |
352 |     pub fn batch_size(mut self, size: usize) -> Self {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: missing documentation for a method
   --> src/compression/realtime.rs:357:5
    |
357 |     pub fn build(self) -> Result<RealtimeCompressor> {
    |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: `infini-zip` (lib) generated 58 warnings
   Compiling infini-zip v0.1.0 (/usr/local/google/home/binwu/go/src/infini.sh/infini-zip)
warning: methods `size` and `capacity` are never used
  --> benches/cpp_comparison.rs:72:8
   |
57 | impl CppValVec {
   | -------------- methods in this implementation
...
72 |     fn size(&self) -> usize {
   |        ^^^^
...
78 |     fn capacity(&self) -> usize {
   |        ^^^^^^^^
   |
   = note: `#[warn(dead_code)]` on by default

warning: method `length` is never used
   --> benches/cpp_comparison.rs:149:8
    |
112 | impl CppFString {
    | --------------- method in this implementation
...
149 |     fn length(&self) -> usize {
    |        ^^^^^^

warning: fields `initial_usage` and `initial_allocations` are never read
   --> benches/cpp_comparison.rs:205:5
    |
204 | struct MemoryStats {
    |        ----------- fields in this struct
205 |     initial_usage: u64,
    |     ^^^^^^^^^^^^^
206 |     initial_allocations: u64,
    |     ^^^^^^^^^^^^^^^^^^^

warning: associated items `new`, `current_usage`, and `current_allocations` are never used
   --> benches/cpp_comparison.rs:210:8
    |
209 | impl MemoryStats {
    | ---------------- associated items in this implementation
210 |     fn new() -> Self {
    |        ^^^
...
219 |     fn current_usage(&self) -> u64 {
    |        ^^^^^^^^^^^^^
...
225 |     fn current_allocations(&self) -> u64 {
    |        ^^^^^^^^^^^^^^^^^^^

warning: function `cpp_valvec_size` is never used
  --> benches/cpp_comparison.rs:23:8
   |
23 |     fn cpp_valvec_size(vec: *mut c_void) -> usize;
   |        ^^^^^^^^^^^^^^^

warning: function `cpp_valvec_capacity` is never used
  --> benches/cpp_comparison.rs:24:8
   |
24 |     fn cpp_valvec_capacity(vec: *mut c_void) -> usize;
   |        ^^^^^^^^^^^^^^^^^^^

warning: function `cpp_fstring_length` is never used
  --> benches/cpp_comparison.rs:34:8
   |
34 |     fn cpp_fstring_length(fstr: *mut c_void) -> usize;
   |        ^^^^^^^^^^^^^^^^^^

warning: function `cpp_fstring_data` is never used
  --> benches/cpp_comparison.rs:35:8
   |
35 |     fn cpp_fstring_data(fstr: *mut c_void) -> *const u8;
   |        ^^^^^^^^^^^^^^^^

warning: function `cpp_get_memory_usage` is never used
  --> benches/cpp_comparison.rs:44:8
   |
44 |     fn cpp_get_memory_usage() -> u64;
   |        ^^^^^^^^^^^^^^^^^^^^

warning: function `cpp_get_allocation_count` is never used
  --> benches/cpp_comparison.rs:45:8
   |
45 |     fn cpp_get_allocation_count() -> u64;
   |        ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused `Result` that must be used
   --> benches/cpp_comparison.rs:523:21
    |
523 |                     black_box(rust_rs.select1(black_box(i)));
    |                     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: `#[warn(unused_must_use)]` on by default
help: use `let _ = ...` to ignore the resulting value
    |
523 |                     let _ = black_box(rust_rs.select1(black_box(i)));
    |                     +++++++

warning: `infini-zip` (bench "cpp_comparison") generated 11 warnings
    Finished `bench` profile [optimized + debuginfo] target(s) in 35.50s
     Running benches/cpp_comparison.rs (target/release/deps/cpp_comparison-aa7d3b2ce6785b4c)
Benchmarking Vector Operations Comparison/Rust FastVec push/1000
Benchmarking Vector Operations Comparison/Rust FastVec push/1000: Warming up for 3.0000 s
Benchmarking Vector Operations Comparison/Rust FastVec push/1000: Collecting 100 samples in estimated 5.0022 s (5.3M iterations)
Benchmarking Vector Operations Comparison/Rust FastVec push/1000: Analyzing
Vector Operations Comparison/Rust FastVec push/1000
                        time:   [1.0382 µs 1.0414 µs 1.0465 µs]
                        thrpt:  [955.58 Melem/s 960.28 Melem/s 963.25 Melem/s]
Found 7 outliers among 100 measurements (7.00%)
  4 (4.00%) high mild
  3 (3.00%) high severe
Benchmarking Vector Operations Comparison/C++ valvec push/1000
Benchmarking Vector Operations Comparison/C++ valvec push/1000: Warming up for 3.0000 s
Benchmarking Vector Operations Comparison/C++ valvec push/1000: Collecting 100 samples in estimated 5.0125 s (1.5M iterations)
Benchmarking Vector Operations Comparison/C++ valvec push/1000: Analyzing
Vector Operations Comparison/C++ valvec push/1000
                        time:   [3.3874 µs 3.3952 µs 3.4054 µs]
                        thrpt:  [293.66 Melem/s 294.54 Melem/s 295.21 Melem/s]
Found 12 outliers among 100 measurements (12.00%)
  4 (4.00%) high mild
  8 (8.00%) high severe
Benchmarking Vector Operations Comparison/Rust FastVec push (reserved)/1000
Benchmarking Vector Operations Comparison/Rust FastVec push (reserved)/1000: Warming up for 3.0000 s
Benchmarking Vector Operations Comparison/Rust FastVec push (reserved)/1000: Collecting 100 samples in estimated 5.0017 s (5.1M iterations)
Benchmarking Vector Operations Comparison/Rust FastVec push (reserved)/1000: Analyzing
Vector Operations Comparison/Rust FastVec push (reserved)/1000
                        time:   [977.26 ns 978.52 ns 979.97 ns]
                        thrpt:  [1.0204 Gelem/s 1.0220 Gelem/s 1.0233 Gelem/s]
Found 6 outliers among 100 measurements (6.00%)
  4 (4.00%) high mild
  2 (2.00%) high severe
Benchmarking Vector Operations Comparison/C++ valvec push (reserved)/1000
Benchmarking Vector Operations Comparison/C++ valvec push (reserved)/1000: Warming up for 3.0000 s
Benchmarking Vector Operations Comparison/C++ valvec push (reserved)/1000: Collecting 100 samples in estimated 5.0156 s (1.4M iterations)
Benchmarking Vector Operations Comparison/C++ valvec push (reserved)/1000: Analyzing
Vector Operations Comparison/C++ valvec push (reserved)/1000
                        time:   [3.4695 µs 3.4747 µs 3.4812 µs]
                        thrpt:  [287.26 Melem/s 287.79 Melem/s 288.23 Melem/s]
Found 13 outliers among 100 measurements (13.00%)
  3 (3.00%) high mild
  10 (10.00%) high severe
Benchmarking Vector Operations Comparison/Rust FastVec push/10000
Benchmarking Vector Operations Comparison/Rust FastVec push/10000: Warming up for 3.0000 s
Benchmarking Vector Operations Comparison/Rust FastVec push/10000: Collecting 100 samples in estimated 5.0318 s (641k iterations)
Benchmarking Vector Operations Comparison/Rust FastVec push/10000: Analyzing
Vector Operations Comparison/Rust FastVec push/10000
                        time:   [7.8261 µs 7.8350 µs 7.8461 µs]
                        thrpt:  [1.2745 Gelem/s 1.2763 Gelem/s 1.2778 Gelem/s]
Found 7 outliers among 100 measurements (7.00%)
  2 (2.00%) high mild
  5 (5.00%) high severe
Benchmarking Vector Operations Comparison/C++ valvec push/10000
Benchmarking Vector Operations Comparison/C++ valvec push/10000: Warming up for 3.0000 s
Benchmarking Vector Operations Comparison/C++ valvec push/10000: Collecting 100 samples in estimated 5.0433 s (146k iterations)
Benchmarking Vector Operations Comparison/C++ valvec push/10000: Analyzing
Vector Operations Comparison/C++ valvec push/10000
                        time:   [34.343 µs 34.379 µs 34.419 µs]
                        thrpt:  [290.54 Melem/s 290.88 Melem/s 291.18 Melem/s]
Found 8 outliers among 100 measurements (8.00%)
  4 (4.00%) high mild
  4 (4.00%) high severe
Benchmarking Vector Operations Comparison/Rust FastVec push (reserved)/10000
Benchmarking Vector Operations Comparison/Rust FastVec push (reserved)/10000: Warming up for 3.0000 s
Benchmarking Vector Operations Comparison/Rust FastVec push (reserved)/10000: Collecting 100 samples in estimated 5.0157 s (520k iterations)
Benchmarking Vector Operations Comparison/Rust FastVec push (reserved)/10000: Analyzing
Vector Operations Comparison/Rust FastVec push (reserved)/10000
                        time:   [9.6154 µs 9.6630 µs 9.7230 µs]
                        thrpt:  [1.0285 Gelem/s 1.0349 Gelem/s 1.0400 Gelem/s]
Found 10 outliers among 100 measurements (10.00%)
  5 (5.00%) high mild
  5 (5.00%) high severe
Benchmarking Vector Operations Comparison/C++ valvec push (reserved)/10000
Benchmarking Vector Operations Comparison/C++ valvec push (reserved)/10000: Warming up for 3.0000 s
Benchmarking Vector Operations Comparison/C++ valvec push (reserved)/10000: Collecting 100 samples in estimated 5.1150 s (146k iterations)
Benchmarking Vector Operations Comparison/C++ valvec push (reserved)/10000: Analyzing
Vector Operations Comparison/C++ valvec push (reserved)/10000
                        time:   [34.911 µs 34.988 µs 35.075 µs]
                        thrpt:  [285.10 Melem/s 285.82 Melem/s 286.44 Melem/s]
Found 8 outliers among 100 measurements (8.00%)
  3 (3.00%) high mild
  5 (5.00%) high severe
Benchmarking Vector Operations Comparison/Rust FastVec push/100000
Benchmarking Vector Operations Comparison/Rust FastVec push/100000: Warming up for 3.0000 s
Benchmarking Vector Operations Comparison/Rust FastVec push/100000: Collecting 100 samples in estimated 5.0428 s (71k iterations)
Benchmarking Vector Operations Comparison/Rust FastVec push/100000: Analyzing
Vector Operations Comparison/Rust FastVec push/100000
                        time:   [71.044 µs 71.094 µs 71.153 µs]
                        thrpt:  [1.4054 Gelem/s 1.4066 Gelem/s 1.4076 Gelem/s]
Found 6 outliers among 100 measurements (6.00%)
  1 (1.00%) low mild
  2 (2.00%) high mild
  3 (3.00%) high severe
Benchmarking Vector Operations Comparison/C++ valvec push/100000
Benchmarking Vector Operations Comparison/C++ valvec push/100000: Warming up for 3.0000 s
Benchmarking Vector Operations Comparison/C++ valvec push/100000: Collecting 100 samples in estimated 5.0535 s (15k iterations)
Benchmarking Vector Operations Comparison/C++ valvec push/100000: Analyzing
Vector Operations Comparison/C++ valvec push/100000
                        time:   [331.85 µs 332.52 µs 333.38 µs]
                        thrpt:  [299.95 Melem/s 300.73 Melem/s 301.35 Melem/s]
Found 7 outliers among 100 measurements (7.00%)
  4 (4.00%) high mild
  3 (3.00%) high severe
Benchmarking Vector Operations Comparison/Rust FastVec push (reserved)/100000
Benchmarking Vector Operations Comparison/Rust FastVec push (reserved)/100000: Warming up for 3.0000 s
Benchmarking Vector Operations Comparison/Rust FastVec push (reserved)/100000: Collecting 100 samples in estimated 5.2339 s (56k iterations)
Benchmarking Vector Operations Comparison/Rust FastVec push (reserved)/100000: Analyzing
Vector Operations Comparison/Rust FastVec push (reserved)/100000
                        time:   [93.610 µs 93.686 µs 93.773 µs]
                        thrpt:  [1.0664 Gelem/s 1.0674 Gelem/s 1.0683 Gelem/s]
Found 6 outliers among 100 measurements (6.00%)
  4 (4.00%) high mild
  2 (2.00%) high severe
Benchmarking Vector Operations Comparison/C++ valvec push (reserved)/100000
Benchmarking Vector Operations Comparison/C++ valvec push (reserved)/100000: Warming up for 3.0000 s
Benchmarking Vector Operations Comparison/C++ valvec push (reserved)/100000: Collecting 100 samples in estimated 5.2129 s (15k iterations)
Benchmarking Vector Operations Comparison/C++ valvec push (reserved)/100000: Analyzing
Vector Operations Comparison/C++ valvec push (reserved)/100000
                        time:   [343.88 µs 344.52 µs 345.42 µs]
                        thrpt:  [289.50 Melem/s 290.26 Melem/s 290.80 Melem/s]
Found 12 outliers among 100 measurements (12.00%)
  1 (1.00%) low mild
  6 (6.00%) high mild
  5 (5.00%) high severe

Benchmarking Vector Memory Usage/Rust FastVec memory efficiency
Benchmarking Vector Memory Usage/Rust FastVec memory efficiency: Warming up for 3.0000 s
Benchmarking Vector Memory Usage/Rust FastVec memory efficiency: Collecting 100 samples in estimated 5.0351 s (662k iterations)
Benchmarking Vector Memory Usage/Rust FastVec memory efficiency: Analyzing
Vector Memory Usage/Rust FastVec memory efficiency
                        time:   [7.6035 µs 7.6231 µs 7.6453 µs]
Found 5 outliers among 100 measurements (5.00%)
  1 (1.00%) high mild
  4 (4.00%) high severe
Benchmarking Vector Memory Usage/C++ valvec memory efficiency
Benchmarking Vector Memory Usage/C++ valvec memory efficiency: Warming up for 3.0000 s
Benchmarking Vector Memory Usage/C++ valvec memory efficiency: Collecting 100 samples in estimated 5.1268 s (152k iterations)
Benchmarking Vector Memory Usage/C++ valvec memory efficiency: Analyzing
Vector Memory Usage/C++ valvec memory efficiency
                        time:   [33.620 µs 33.650 µs 33.684 µs]
Found 4 outliers among 100 measurements (4.00%)
  1 (1.00%) high mild
  3 (3.00%) high severe

Benchmarking String Operations Comparison/Rust FastStr hash Short
Benchmarking String Operations Comparison/Rust FastStr hash Short: Warming up for 3.0000 s
Benchmarking String Operations Comparison/Rust FastStr hash Short: Collecting 100 samples in estimated 5.0000 s (509M iterations)
Benchmarking String Operations Comparison/Rust FastStr hash Short: Analyzing
String Operations Comparison/Rust FastStr hash Short
                        time:   [9.8214 ns 9.8345 ns 9.8501 ns]
Found 14 outliers among 100 measurements (14.00%)
  1 (1.00%) low mild
  7 (7.00%) high mild
  6 (6.00%) high severe
Benchmarking String Operations Comparison/C++ fstring hash Short
Benchmarking String Operations Comparison/C++ fstring hash Short: Warming up for 3.0000 s
Benchmarking String Operations Comparison/C++ fstring hash Short: Collecting 100 samples in estimated 5.0000 s (728M iterations)
Benchmarking String Operations Comparison/C++ fstring hash Short: Analyzing
String Operations Comparison/C++ fstring hash Short
                        time:   [6.8601 ns 6.8700 ns 6.8827 ns]
Found 11 outliers among 100 measurements (11.00%)
  1 (1.00%) low mild
  6 (6.00%) high mild
  4 (4.00%) high severe
Benchmarking String Operations Comparison/Rust FastStr find Short
Benchmarking String Operations Comparison/Rust FastStr find Short: Warming up for 3.0000 s
Benchmarking String Operations Comparison/Rust FastStr find Short: Collecting 100 samples in estimated 5.0000 s (1.5B iterations)
Benchmarking String Operations Comparison/Rust FastStr find Short: Analyzing
String Operations Comparison/Rust FastStr find Short
                        time:   [3.2585 ns 3.2736 ns 3.2889 ns]
Found 3 outliers among 100 measurements (3.00%)
  1 (1.00%) low mild
  2 (2.00%) high mild
Benchmarking String Operations Comparison/C++ fstring find Short
Benchmarking String Operations Comparison/C++ fstring find Short: Warming up for 3.0000 s
Benchmarking String Operations Comparison/C++ fstring find Short: Collecting 100 samples in estimated 5.0000 s (320M iterations)
Benchmarking String Operations Comparison/C++ fstring find Short: Analyzing
String Operations Comparison/C++ fstring find Short
                        time:   [15.542 ns 15.556 ns 15.572 ns]
Found 7 outliers among 100 measurements (7.00%)
  5 (5.00%) high mild
  2 (2.00%) high severe
Benchmarking String Operations Comparison/Rust FastStr hash Medium
Benchmarking String Operations Comparison/Rust FastStr hash Medium: Warming up for 3.0000 s
Benchmarking String Operations Comparison/Rust FastStr hash Medium: Collecting 100 samples in estimated 5.0013 s (18M iterations)
Benchmarking String Operations Comparison/Rust FastStr hash Medium: Analyzing
String Operations Comparison/Rust FastStr hash Medium
                        time:   [269.83 ns 270.03 ns 270.31 ns]
Found 6 outliers among 100 measurements (6.00%)
  3 (3.00%) high mild
  3 (3.00%) high severe
Benchmarking String Operations Comparison/C++ fstring hash Medium
Benchmarking String Operations Comparison/C++ fstring hash Medium: Warming up for 3.0000 s
Benchmarking String Operations Comparison/C++ fstring hash Medium: Collecting 100 samples in estimated 5.0020 s (12M iterations)
Benchmarking String Operations Comparison/C++ fstring hash Medium: Analyzing
String Operations Comparison/C++ fstring hash Medium
                        time:   [411.80 ns 412.24 ns 412.91 ns]
Found 8 outliers among 100 measurements (8.00%)
  2 (2.00%) low mild
  4 (4.00%) high mild
  2 (2.00%) high severe
Benchmarking String Operations Comparison/Rust FastStr find Medium
Benchmarking String Operations Comparison/Rust FastStr find Medium: Warming up for 3.0000 s
Benchmarking String Operations Comparison/Rust FastStr find Medium: Collecting 100 samples in estimated 5.0002 s (118M iterations)
Benchmarking String Operations Comparison/Rust FastStr find Medium: Analyzing
String Operations Comparison/Rust FastStr find Medium
                        time:   [42.362 ns 42.459 ns 42.615 ns]
Found 7 outliers among 100 measurements (7.00%)
  3 (3.00%) high mild
  4 (4.00%) high severe
Benchmarking String Operations Comparison/C++ fstring find Medium
Benchmarking String Operations Comparison/C++ fstring find Medium: Warming up for 3.0000 s
Benchmarking String Operations Comparison/C++ fstring find Medium: Collecting 100 samples in estimated 5.0000 s (146M iterations)
Benchmarking String Operations Comparison/C++ fstring find Medium: Analyzing
String Operations Comparison/C++ fstring find Medium
                        time:   [34.265 ns 34.294 ns 34.327 ns]
Found 9 outliers among 100 measurements (9.00%)
  7 (7.00%) high mild
  2 (2.00%) high severe
Benchmarking String Operations Comparison/Rust FastStr substring Medium
Benchmarking String Operations Comparison/Rust FastStr substring Medium: Warming up for 3.0000 s
Benchmarking String Operations Comparison/Rust FastStr substring Medium: Collecting 100 samples in estimated 5.0000 s (4.0B iterations)
Benchmarking String Operations Comparison/Rust FastStr substring Medium: Analyzing
String Operations Comparison/Rust FastStr substring Medium
                        time:   [1.2441 ns 1.2455 ns 1.2472 ns]
Found 10 outliers among 100 measurements (10.00%)
  1 (1.00%) low mild
  5 (5.00%) high mild
  4 (4.00%) high severe
Benchmarking String Operations Comparison/C++ fstring substring Medium
Benchmarking String Operations Comparison/C++ fstring substring Medium: Warming up for 3.0000 s
Benchmarking String Operations Comparison/C++ fstring substring Medium: Collecting 100 samples in estimated 5.0001 s (191M iterations)
Benchmarking String Operations Comparison/C++ fstring substring Medium: Analyzing
String Operations Comparison/C++ fstring substring Medium
                        time:   [25.872 ns 25.900 ns 25.931 ns]
Found 7 outliers among 100 measurements (7.00%)
  1 (1.00%) high mild
  6 (6.00%) high severe
Benchmarking String Operations Comparison/Rust FastStr hash Long
Benchmarking String Operations Comparison/Rust FastStr hash Long: Warming up for 3.0000 s
Benchmarking String Operations Comparison/Rust FastStr hash Long: Collecting 100 samples in estimated 5.0047 s (1.4M iterations)
Benchmarking String Operations Comparison/Rust FastStr hash Long: Analyzing
String Operations Comparison/Rust FastStr hash Long
                        time:   [3.5397 µs 3.5417 µs 3.5438 µs]
Found 7 outliers among 100 measurements (7.00%)
  6 (6.00%) high mild
  1 (1.00%) high severe
Benchmarking String Operations Comparison/C++ fstring hash Long
Benchmarking String Operations Comparison/C++ fstring hash Long: Warming up for 3.0000 s
Benchmarking String Operations Comparison/C++ fstring hash Long: Collecting 100 samples in estimated 5.0232 s (944k iterations)
Benchmarking String Operations Comparison/C++ fstring hash Long: Analyzing
String Operations Comparison/C++ fstring hash Long
                        time:   [5.3069 µs 5.3113 µs 5.3168 µs]
Found 9 outliers among 100 measurements (9.00%)
  2 (2.00%) low mild
  5 (5.00%) high mild
  2 (2.00%) high severe
Benchmarking String Operations Comparison/Rust FastStr find Long
Benchmarking String Operations Comparison/Rust FastStr find Long: Warming up for 3.0000 s
Benchmarking String Operations Comparison/Rust FastStr find Long: Collecting 100 samples in estimated 5.0002 s (118M iterations)
Benchmarking String Operations Comparison/Rust FastStr find Long: Analyzing
String Operations Comparison/Rust FastStr find Long
                        time:   [42.492 ns 42.541 ns 42.597 ns]
Found 6 outliers among 100 measurements (6.00%)
  4 (4.00%) high mild
  2 (2.00%) high severe
Benchmarking String Operations Comparison/C++ fstring find Long
Benchmarking String Operations Comparison/C++ fstring find Long: Warming up for 3.0000 s
Benchmarking String Operations Comparison/C++ fstring find Long: Collecting 100 samples in estimated 5.0001 s (145M iterations)
Benchmarking String Operations Comparison/C++ fstring find Long: Analyzing
String Operations Comparison/C++ fstring find Long
                        time:   [34.424 ns 34.516 ns 34.617 ns]
Found 4 outliers among 100 measurements (4.00%)
  1 (1.00%) high mild
  3 (3.00%) high severe
Benchmarking String Operations Comparison/Rust FastStr substring Long
Benchmarking String Operations Comparison/Rust FastStr substring Long: Warming up for 3.0000 s
Benchmarking String Operations Comparison/Rust FastStr substring Long: Collecting 100 samples in estimated 5.0000 s (4.0B iterations)
Benchmarking String Operations Comparison/Rust FastStr substring Long: Analyzing
String Operations Comparison/Rust FastStr substring Long
                        time:   [1.2427 ns 1.2433 ns 1.2440 ns]
Found 6 outliers among 100 measurements (6.00%)
  1 (1.00%) low mild
  4 (4.00%) high mild
  1 (1.00%) high severe
Benchmarking String Operations Comparison/C++ fstring substring Long
Benchmarking String Operations Comparison/C++ fstring substring Long: Warming up for 3.0000 s
Benchmarking String Operations Comparison/C++ fstring substring Long: Collecting 100 samples in estimated 5.0001 s (193M iterations)
Benchmarking String Operations Comparison/C++ fstring substring Long: Analyzing
String Operations Comparison/C++ fstring substring Long
                        time:   [25.810 ns 25.835 ns 25.862 ns]
Found 5 outliers among 100 measurements (5.00%)
  1 (1.00%) high mild
  4 (4.00%) high severe

Benchmarking String Memory Comparison/Rust FastStr creation
Benchmarking String Memory Comparison/Rust FastStr creation: Warming up for 3.0000 s
Benchmarking String Memory Comparison/Rust FastStr creation: Collecting 100 samples in estimated 5.0019 s (8.0M iterations)
Benchmarking String Memory Comparison/Rust FastStr creation: Analyzing
String Memory Comparison/Rust FastStr creation
                        time:   [623.08 ns 624.90 ns 627.39 ns]
                        thrpt:  [1.5939 Gelem/s 1.6003 Gelem/s 1.6049 Gelem/s]
Found 12 outliers among 100 measurements (12.00%)
  1 (1.00%) low mild
  4 (4.00%) high mild
  7 (7.00%) high severe
Benchmarking String Memory Comparison/C++ fstring creation
Benchmarking String Memory Comparison/C++ fstring creation: Warming up for 3.0000 s
Benchmarking String Memory Comparison/C++ fstring creation: Collecting 100 samples in estimated 5.1074 s (207k iterations)
Benchmarking String Memory Comparison/C++ fstring creation: Analyzing
String Memory Comparison/C++ fstring creation
                        time:   [24.346 µs 24.387 µs 24.433 µs]
                        thrpt:  [40.927 Melem/s 41.006 Melem/s 41.074 Melem/s]
Found 9 outliers among 100 measurements (9.00%)
  5 (5.00%) high mild
  4 (4.00%) high severe

Benchmarking Succinct Data Structures Comparison/Rust BitVector creation 10000
Benchmarking Succinct Data Structures Comparison/Rust BitVector creation 10000: Warming up for 3.0000 s
Benchmarking Succinct Data Structures Comparison/Rust BitVector creation 10000: Collecting 100 samples in estimated 5.1561 s (121k iterations)
Benchmarking Succinct Data Structures Comparison/Rust BitVector creation 10000: Analyzing
Succinct Data Structures Comparison/Rust BitVector creation 10000
                        time:   [42.339 µs 42.451 µs 42.621 µs]
Found 10 outliers among 100 measurements (10.00%)
  4 (4.00%) high mild
  6 (6.00%) high severe
Benchmarking Succinct Data Structures Comparison/Rust RankSelect256 construction 10000
Benchmarking Succinct Data Structures Comparison/Rust RankSelect256 construction 10000: Warming up for 3.0000 s
Benchmarking Succinct Data Structures Comparison/Rust RankSelect256 construction 10000: Collecting 100 samples in estimated 5.1505 s (141k iterations)
Benchmarking Succinct Data Structures Comparison/Rust RankSelect256 construction 10000: Analyzing
Succinct Data Structures Comparison/Rust RankSelect256 construction 10000
                        time:   [36.342 µs 36.357 µs 36.373 µs]
Found 6 outliers among 100 measurements (6.00%)
  4 (4.00%) high mild
  2 (2.00%) high severe
Benchmarking Succinct Data Structures Comparison/C++ RankSelect construction 10000
Benchmarking Succinct Data Structures Comparison/C++ RankSelect construction 10000: Warming up for 3.0000 s
Benchmarking Succinct Data Structures Comparison/C++ RankSelect construction 10000: Collecting 100 samples in estimated 5.0000 s (676M iterations)
Benchmarking Succinct Data Structures Comparison/C++ RankSelect construction 10000: Analyzing
Succinct Data Structures Comparison/C++ RankSelect construction 10000
                        time:   [7.3689 ns 7.3772 ns 7.3908 ns]
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) high severe
Benchmarking Succinct Data Structures Comparison/Rust rank1 queries 10000
Benchmarking Succinct Data Structures Comparison/Rust rank1 queries 10000: Warming up for 3.0000 s
Benchmarking Succinct Data Structures Comparison/Rust rank1 queries 10000: Collecting 100 samples in estimated 5.0145 s (869k iterations)
Benchmarking Succinct Data Structures Comparison/Rust rank1 queries 10000: Analyzing
Succinct Data Structures Comparison/Rust rank1 queries 10000
                        time:   [5.7693 µs 5.7726 µs 5.7763 µs]
Found 5 outliers among 100 measurements (5.00%)
  3 (3.00%) high mild
  2 (2.00%) high severe
Benchmarking Succinct Data Structures Comparison/C++ rank1 queries 10000
Benchmarking Succinct Data Structures Comparison/C++ rank1 queries 10000: Warming up for 3.0000 s
Benchmarking Succinct Data Structures Comparison/C++ rank1 queries 10000: Collecting 100 samples in estimated 5.0006 s (20M iterations)
Benchmarking Succinct Data Structures Comparison/C++ rank1 queries 10000: Analyzing
Succinct Data Structures Comparison/C++ rank1 queries 10000
                        time:   [254.10 ns 254.60 ns 255.27 ns]
Found 5 outliers among 100 measurements (5.00%)
  1 (1.00%) low mild
  1 (1.00%) high mild
  3 (3.00%) high severe
Benchmarking Succinct Data Structures Comparison/Rust select1 queries 10000
Benchmarking Succinct Data Structures Comparison/Rust select1 queries 10000: Warming up for 3.0000 s
Benchmarking Succinct Data Structures Comparison/Rust select1 queries 10000: Collecting 100 samples in estimated 6.6576 s (20k iterations)
Benchmarking Succinct Data Structures Comparison/Rust select1 queries 10000: Analyzing
Succinct Data Structures Comparison/Rust select1 queries 10000
                        time:   [329.82 µs 330.47 µs 331.20 µs]
Found 8 outliers among 100 measurements (8.00%)
  5 (5.00%) high mild
  3 (3.00%) high severe
Benchmarking Succinct Data Structures Comparison/C++ select1 queries 10000
Benchmarking Succinct Data Structures Comparison/C++ select1 queries 10000: Warming up for 3.0000 s
Benchmarking Succinct Data Structures Comparison/C++ select1 queries 10000: Collecting 100 samples in estimated 5.0009 s (18M iterations)
Benchmarking Succinct Data Structures Comparison/C++ select1 queries 10000: Analyzing
Succinct Data Structures Comparison/C++ select1 queries 10000
                        time:   [269.97 ns 270.53 ns 271.21 ns]
Found 9 outliers among 100 measurements (9.00%)
  3 (3.00%) high mild
  6 (6.00%) high severe
Benchmarking Succinct Data Structures Comparison/Rust BitVector creation 100000
Benchmarking Succinct Data Structures Comparison/Rust BitVector creation 100000: Warming up for 3.0000 s
Benchmarking Succinct Data Structures Comparison/Rust BitVector creation 100000: Collecting 100 samples in estimated 6.3840 s (15k iterations)
Benchmarking Succinct Data Structures Comparison/Rust BitVector creation 100000: Analyzing
Succinct Data Structures Comparison/Rust BitVector creation 100000
                        time:   [420.01 µs 420.37 µs 420.78 µs]
Found 4 outliers among 100 measurements (4.00%)
  2 (2.00%) high mild
  2 (2.00%) high severe
Benchmarking Succinct Data Structures Comparison/Rust RankSelect256 construction 100000
Benchmarking Succinct Data Structures Comparison/Rust RankSelect256 construction 100000: Warming up for 3.0000 s
Benchmarking Succinct Data Structures Comparison/Rust RankSelect256 construction 100000: Collecting 100 samples in estimated 7.7734 s (10k iterations)
Benchmarking Succinct Data Structures Comparison/Rust RankSelect256 construction 100000: Analyzing
Succinct Data Structures Comparison/Rust RankSelect256 construction 100000
                        time:   [768.00 µs 768.63 µs 769.36 µs]
Found 11 outliers among 100 measurements (11.00%)
  1 (1.00%) low mild
  8 (8.00%) high mild
  2 (2.00%) high severe
Benchmarking Succinct Data Structures Comparison/C++ RankSelect construction 100000
Benchmarking Succinct Data Structures Comparison/C++ RankSelect construction 100000: Warming up for 3.0000 s
Benchmarking Succinct Data Structures Comparison/C++ RankSelect construction 100000: Collecting 100 samples in estimated 5.0000 s (678M iterations)
Benchmarking Succinct Data Structures Comparison/C++ RankSelect construction 100000: Analyzing
Succinct Data Structures Comparison/C++ RankSelect construction 100000
                        time:   [7.3650 ns 7.3684 ns 7.3720 ns]
Found 6 outliers among 100 measurements (6.00%)
  4 (4.00%) high mild
  2 (2.00%) high severe
Benchmarking Succinct Data Structures Comparison/Rust rank1 queries 100000
Benchmarking Succinct Data Structures Comparison/Rust rank1 queries 100000: Warming up for 3.0000 s
Benchmarking Succinct Data Structures Comparison/Rust rank1 queries 100000: Collecting 100 samples in estimated 5.8662 s (10k iterations)
Benchmarking Succinct Data Structures Comparison/Rust rank1 queries 100000: Analyzing
Succinct Data Structures Comparison/Rust rank1 queries 100000
                        time:   [580.10 µs 580.40 µs 580.73 µs]
Found 8 outliers among 100 measurements (8.00%)
  1 (1.00%) low mild
  6 (6.00%) high mild
  1 (1.00%) high severe
Benchmarking Succinct Data Structures Comparison/C++ rank1 queries 100000
Benchmarking Succinct Data Structures Comparison/C++ rank1 queries 100000: Warming up for 3.0000 s
Benchmarking Succinct Data Structures Comparison/C++ rank1 queries 100000: Collecting 100 samples in estimated 5.0084 s (2.0M iterations)
Benchmarking Succinct Data Structures Comparison/C++ rank1 queries 100000: Analyzing
Succinct Data Structures Comparison/C++ rank1 queries 100000
                        time:   [2.4919 µs 2.4934 µs 2.4951 µs]
Found 4 outliers among 100 measurements (4.00%)
  3 (3.00%) high mild
  1 (1.00%) high severe
Benchmarking Succinct Data Structures Comparison/Rust select1 queries 100000
Benchmarking Succinct Data Structures Comparison/Rust select1 queries 100000: Warming up for 3.0000 s
Benchmarking Succinct Data Structures Comparison/Rust select1 queries 100000: Collecting 100 samples in estimated 5.0654 s (1500 iterations)
Benchmarking Succinct Data Structures Comparison/Rust select1 queries 100000: Analyzing
Succinct Data Structures Comparison/Rust select1 queries 100000
                        time:   [3.3844 ms 3.4104 ms 3.4471 ms]
Found 12 outliers among 100 measurements (12.00%)
  6 (6.00%) high mild
  6 (6.00%) high severe
Benchmarking Succinct Data Structures Comparison/C++ select1 queries 100000
Benchmarking Succinct Data Structures Comparison/C++ select1 queries 100000: Warming up for 3.0000 s
Benchmarking Succinct Data Structures Comparison/C++ select1 queries 100000: Collecting 100 samples in estimated 5.0012 s (18M iterations)
Benchmarking Succinct Data Structures Comparison/C++ select1 queries 100000: Analyzing
Succinct Data Structures Comparison/C++ select1 queries 100000
                        time:   [285.23 ns 285.54 ns 285.95 ns]
Found 5 outliers among 100 measurements (5.00%)
  1 (1.00%) high mild
  4 (4.00%) high severe

Benchmarking HashMap Operations Comparison/Rust GoldHashMap insert/1000
Benchmarking HashMap Operations Comparison/Rust GoldHashMap insert/1000: Warming up for 3.0000 s
Benchmarking HashMap Operations Comparison/Rust GoldHashMap insert/1000: Collecting 100 samples in estimated 5.2150 s (50k iterations)
Benchmarking HashMap Operations Comparison/Rust GoldHashMap insert/1000: Analyzing
HashMap Operations Comparison/Rust GoldHashMap insert/1000
                        time:   [102.24 µs 102.34 µs 102.45 µs]
                        thrpt:  [9.7607 Melem/s 9.7713 Melem/s 9.7805 Melem/s]
Found 13 outliers among 100 measurements (13.00%)
  7 (7.00%) high mild
  6 (6.00%) high severe
Benchmarking HashMap Operations Comparison/std::HashMap insert/1000
Benchmarking HashMap Operations Comparison/std::HashMap insert/1000: Warming up for 3.0000 s
Benchmarking HashMap Operations Comparison/std::HashMap insert/1000: Collecting 100 samples in estimated 5.4041 s (40k iterations)
Benchmarking HashMap Operations Comparison/std::HashMap insert/1000: Analyzing
HashMap Operations Comparison/std::HashMap insert/1000
                        time:   [131.96 µs 132.42 µs 133.15 µs]
                        thrpt:  [7.5102 Melem/s 7.5518 Melem/s 7.5782 Melem/s]
Found 6 outliers among 100 measurements (6.00%)
  2 (2.00%) high mild
  4 (4.00%) high severe
Benchmarking HashMap Operations Comparison/Rust GoldHashMap lookup/1000
Benchmarking HashMap Operations Comparison/Rust GoldHashMap lookup/1000: Warming up for 3.0000 s
Benchmarking HashMap Operations Comparison/Rust GoldHashMap lookup/1000: Collecting 100 samples in estimated 5.0231 s (1.0M iterations)
Benchmarking HashMap Operations Comparison/Rust GoldHashMap lookup/1000: Analyzing
HashMap Operations Comparison/Rust GoldHashMap lookup/1000
                        time:   [4.9360 µs 4.9427 µs 4.9511 µs]
                        thrpt:  [201.98 Melem/s 202.32 Melem/s 202.59 Melem/s]
Found 12 outliers among 100 measurements (12.00%)
  9 (9.00%) high mild
  3 (3.00%) high severe
Benchmarking HashMap Operations Comparison/std::HashMap lookup/1000
Benchmarking HashMap Operations Comparison/std::HashMap lookup/1000: Warming up for 3.0000 s
Benchmarking HashMap Operations Comparison/std::HashMap lookup/1000: Collecting 100 samples in estimated 5.0186 s (965k iterations)
Benchmarking HashMap Operations Comparison/std::HashMap lookup/1000: Analyzing
HashMap Operations Comparison/std::HashMap lookup/1000
                        time:   [5.1979 µs 5.2077 µs 5.2200 µs]
                        thrpt:  [191.57 Melem/s 192.02 Melem/s 192.39 Melem/s]
Found 10 outliers among 100 measurements (10.00%)
  7 (7.00%) high mild
  3 (3.00%) high severe
Benchmarking HashMap Operations Comparison/Rust GoldHashMap insert/10000
Benchmarking HashMap Operations Comparison/Rust GoldHashMap insert/10000: Warming up for 3.0000 s

Warning: Unable to complete 100 samples in 5.0s. You may wish to increase target time to 5.2s, enable flat sampling, or reduce sample count to 60.
Benchmarking HashMap Operations Comparison/Rust GoldHashMap insert/10000: Collecting 100 samples in estimated 5.2313 s (5050 iterations)
Benchmarking HashMap Operations Comparison/Rust GoldHashMap insert/10000: Analyzing
HashMap Operations Comparison/Rust GoldHashMap insert/10000
                        time:   [1.0316 ms 1.0334 ms 1.0355 ms]
                        thrpt:  [9.6569 Melem/s 9.6769 Melem/s 9.6937 Melem/s]
Found 2 outliers among 100 measurements (2.00%)
  1 (1.00%) high mild
  1 (1.00%) high severe
Benchmarking HashMap Operations Comparison/std::HashMap insert/10000
Benchmarking HashMap Operations Comparison/std::HashMap insert/10000: Warming up for 3.0000 s

Warning: Unable to complete 100 samples in 5.0s. You may wish to increase target time to 6.6s, enable flat sampling, or reduce sample count to 60.
Benchmarking HashMap Operations Comparison/std::HashMap insert/10000: Collecting 100 samples in estimated 6.5586 s (5050 iterations)
Benchmarking HashMap Operations Comparison/std::HashMap insert/10000: Analyzing
HashMap Operations Comparison/std::HashMap insert/10000
                        time:   [1.2936 ms 1.2975 ms 1.3016 ms]
                        thrpt:  [7.6826 Melem/s 7.7072 Melem/s 7.7304 Melem/s]
Found 7 outliers among 100 measurements (7.00%)
  3 (3.00%) high mild
  4 (4.00%) high severe
Benchmarking HashMap Operations Comparison/Rust GoldHashMap lookup/10000
Benchmarking HashMap Operations Comparison/Rust GoldHashMap lookup/10000: Warming up for 3.0000 s
Benchmarking HashMap Operations Comparison/Rust GoldHashMap lookup/10000: Collecting 100 samples in estimated 5.0091 s (96k iterations)
Benchmarking HashMap Operations Comparison/Rust GoldHashMap lookup/10000: Analyzing
HashMap Operations Comparison/Rust GoldHashMap lookup/10000
                        time:   [51.885 µs 51.956 µs 52.035 µs]
                        thrpt:  [192.18 Melem/s 192.47 Melem/s 192.73 Melem/s]
Found 9 outliers among 100 measurements (9.00%)
  4 (4.00%) high mild
  5 (5.00%) high severe
Benchmarking HashMap Operations Comparison/std::HashMap lookup/10000
Benchmarking HashMap Operations Comparison/std::HashMap lookup/10000: Warming up for 3.0000 s
Benchmarking HashMap Operations Comparison/std::HashMap lookup/10000: Collecting 100 samples in estimated 5.0830 s (86k iterations)
Benchmarking HashMap Operations Comparison/std::HashMap lookup/10000: Analyzing
HashMap Operations Comparison/std::HashMap lookup/10000
                        time:   [59.071 µs 59.164 µs 59.277 µs]
                        thrpt:  [168.70 Melem/s 169.02 Melem/s 169.29 Melem/s]
Found 4 outliers among 100 measurements (4.00%)
  2 (2.00%) high mild
  2 (2.00%) high severe

Benchmarking Memory Mapping Comparison/Rust MemoryMappedInput 1KB
Benchmarking Memory Mapping Comparison/Rust MemoryMappedInput 1KB: Warming up for 3.0000 s
Benchmarking Memory Mapping Comparison/Rust MemoryMappedInput 1KB: Collecting 100 samples in estimated 5.0329 s (106k iterations)
Benchmarking Memory Mapping Comparison/Rust MemoryMappedInput 1KB: Analyzing
Memory Mapping Comparison/Rust MemoryMappedInput 1KB
                        time:   [47.274 µs 47.443 µs 47.642 µs]
                        thrpt:  [20.498 MiB/s 20.584 MiB/s 20.658 MiB/s]
Found 6 outliers among 100 measurements (6.00%)
  2 (2.00%) high mild
  4 (4.00%) high severe
Benchmarking Memory Mapping Comparison/Standard File I/O 1KB
Benchmarking Memory Mapping Comparison/Standard File I/O 1KB: Warming up for 3.0000 s
Benchmarking Memory Mapping Comparison/Standard File I/O 1KB: Collecting 100 samples in estimated 5.0512 s (141k iterations)
Benchmarking Memory Mapping Comparison/Standard File I/O 1KB: Analyzing
Memory Mapping Comparison/Standard File I/O 1KB
                        time:   [35.618 µs 35.708 µs 35.833 µs]
                        thrpt:  [27.253 MiB/s 27.348 MiB/s 27.418 MiB/s]
Found 8 outliers among 100 measurements (8.00%)
  4 (4.00%) high mild
  4 (4.00%) high severe
Benchmarking Memory Mapping Comparison/Rust MemoryMappedInput 1MB
Benchmarking Memory Mapping Comparison/Rust MemoryMappedInput 1MB: Warming up for 3.0000 s
Benchmarking Memory Mapping Comparison/Rust MemoryMappedInput 1MB: Collecting 100 samples in estimated 5.7073 s (30k iterations)
Benchmarking Memory Mapping Comparison/Rust MemoryMappedInput 1MB: Analyzing
Memory Mapping Comparison/Rust MemoryMappedInput 1MB
                        time:   [190.86 µs 192.45 µs 193.95 µs]
                        thrpt:  [5.0351 GiB/s 5.0744 GiB/s 5.1166 GiB/s]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high severe
Benchmarking Memory Mapping Comparison/Standard File I/O 1MB
Benchmarking Memory Mapping Comparison/Standard File I/O 1MB: Warming up for 3.0000 s
Benchmarking Memory Mapping Comparison/Standard File I/O 1MB: Collecting 100 samples in estimated 5.2750 s (40k iterations)
Benchmarking Memory Mapping Comparison/Standard File I/O 1MB: Analyzing
Memory Mapping Comparison/Standard File I/O 1MB
                        time:   [128.01 µs 128.75 µs 129.51 µs]
                        thrpt:  [7.5406 GiB/s 7.5852 GiB/s 7.6290 GiB/s]
Found 10 outliers among 100 measurements (10.00%)
  4 (4.00%) high mild
  6 (6.00%) high severe
Benchmarking Memory Mapping Comparison/Rust MemoryMappedInput 10MB
Benchmarking Memory Mapping Comparison/Rust MemoryMappedInput 10MB: Warming up for 3.0000 s

Warning: Unable to complete 100 samples in 5.0s. You may wish to increase target time to 8.1s, enable flat sampling, or reduce sample count to 50.
Benchmarking Memory Mapping Comparison/Rust MemoryMappedInput 10MB: Collecting 100 samples in estimated 8.1465 s (5050 iterations)
Benchmarking Memory Mapping Comparison/Rust MemoryMappedInput 10MB: Analyzing
Memory Mapping Comparison/Rust MemoryMappedInput 10MB
                        time:   [1.5535 ms 1.5698 ms 1.5869 ms]
                        thrpt:  [6.1540 GiB/s 6.2209 GiB/s 6.2863 GiB/s]
Found 3 outliers among 100 measurements (3.00%)
  1 (1.00%) high mild
  2 (2.00%) high severe
Benchmarking Memory Mapping Comparison/Standard File I/O 10MB
Benchmarking Memory Mapping Comparison/Standard File I/O 10MB: Warming up for 3.0000 s

Warning: Unable to complete 100 samples in 5.0s. You may wish to increase target time to 6.3s, enable flat sampling, or reduce sample count to 60.
Benchmarking Memory Mapping Comparison/Standard File I/O 10MB: Collecting 100 samples in estimated 6.3458 s (5050 iterations)
Benchmarking Memory Mapping Comparison/Standard File I/O 10MB: Analyzing
Memory Mapping Comparison/Standard File I/O 10MB
                        time:   [1.2883 ms 1.3096 ms 1.3343 ms]
                        thrpt:  [7.3188 GiB/s 7.4569 GiB/s 7.5802 GiB/s]
Found 7 outliers among 100 measurements (7.00%)
  6 (6.00%) high mild
  1 (1.00%) high severe

Benchmarking Entropy Coding Performance/Entropy calculation Random
Benchmarking Entropy Coding Performance/Entropy calculation Random: Warming up for 3.0000 s
Benchmarking Entropy Coding Performance/Entropy calculation Random: Collecting 100 samples in estimated 5.0204 s (1.1M iterations)
Benchmarking Entropy Coding Performance/Entropy calculation Random: Analyzing
Entropy Coding Performance/Entropy calculation Random
                        time:   [4.7658 µs 4.7745 µs 4.7865 µs]
                        thrpt:  [1.9457 GiB/s 1.9506 GiB/s 1.9542 GiB/s]
                 change:
                        time:   [+0.1350% +0.4704% +0.7731%] (p = 0.00 < 0.05)
                        thrpt:  [-0.7672% -0.4682% -0.1348%]
                        Change within noise threshold.
Found 7 outliers among 100 measurements (7.00%)
  5 (5.00%) high mild
  2 (2.00%) high severe
Benchmarking Entropy Coding Performance/Huffman tree construction Random
Benchmarking Entropy Coding Performance/Huffman tree construction Random: Warming up for 3.0000 s
Benchmarking Entropy Coding Performance/Huffman tree construction Random: Collecting 100 samples in estimated 5.1515 s (71k iterations)
Benchmarking Entropy Coding Performance/Huffman tree construction Random: Analyzing
Entropy Coding Performance/Huffman tree construction Random
                        time:   [72.443 µs 72.520 µs 72.604 µs]
                        thrpt:  [131.35 MiB/s 131.50 MiB/s 131.65 MiB/s]
                 change:
                        time:   [-5.5227% -5.2387% -4.9667%] (p = 0.00 < 0.05)
                        thrpt:  [+5.2262% +5.5284% +5.8456%]
                        Performance has improved.
Found 5 outliers among 100 measurements (5.00%)
  2 (2.00%) high mild
  3 (3.00%) high severe
Benchmarking Entropy Coding Performance/Huffman encoding Random
Benchmarking Entropy Coding Performance/Huffman encoding Random: Warming up for 3.0000 s

Warning: Unable to complete 100 samples in 5.0s. You may wish to increase target time to 7.3s, enable flat sampling, or reduce sample count to 50.
Benchmarking Entropy Coding Performance/Huffman encoding Random: Collecting 100 samples in estimated 7.3042 s (5050 iterations)
Benchmarking Entropy Coding Performance/Huffman encoding Random: Analyzing
Entropy Coding Performance/Huffman encoding Random
                        time:   [1.4399 ms 1.4424 ms 1.4452 ms]
                        thrpt:  [6.5990 MiB/s 6.6119 MiB/s 6.6230 MiB/s]
                 change:
                        time:   [-1.4922% -1.0570% -0.6452%] (p = 0.00 < 0.05)
                        thrpt:  [+0.6493% +1.0683% +1.5148%]
                        Change within noise threshold.
Found 11 outliers among 100 measurements (11.00%)
  6 (6.00%) high mild
  5 (5.00%) high severe
Benchmarking Entropy Coding Performance/Entropy calculation Biased
Benchmarking Entropy Coding Performance/Entropy calculation Biased: Warming up for 3.0000 s
Benchmarking Entropy Coding Performance/Entropy calculation Biased: Collecting 100 samples in estimated 5.0043 s (773k iterations)
Benchmarking Entropy Coding Performance/Entropy calculation Biased: Analyzing
Entropy Coding Performance/Entropy calculation Biased
                        time:   [6.4608 µs 6.4644 µs 6.4686 µs]
                        thrpt:  [1.8717 GiB/s 1.8729 GiB/s 1.8740 GiB/s]
                 change:
                        time:   [-0.8851% -0.6105% -0.4083%] (p = 0.00 < 0.05)
                        thrpt:  [+0.4100% +0.6143% +0.8930%]
                        Change within noise threshold.
Found 5 outliers among 100 measurements (5.00%)
  2 (2.00%) high mild
  3 (3.00%) high severe
Benchmarking Entropy Coding Performance/Huffman tree construction Biased
Benchmarking Entropy Coding Performance/Huffman tree construction Biased: Warming up for 3.0000 s
Benchmarking Entropy Coding Performance/Huffman tree construction Biased: Collecting 100 samples in estimated 5.0149 s (646k iterations)
Benchmarking Entropy Coding Performance/Huffman tree construction Biased: Analyzing
Entropy Coding Performance/Huffman tree construction Biased
                        time:   [7.7478 µs 7.7544 µs 7.7626 µs]
                        thrpt:  [1.5597 GiB/s 1.5613 GiB/s 1.5627 GiB/s]
                 change:
                        time:   [-3.4607% -3.2865% -3.0999%] (p = 0.00 < 0.05)
                        thrpt:  [+3.1991% +3.3981% +3.5847%]
                        Performance has improved.
Found 2 outliers among 100 measurements (2.00%)
  2 (2.00%) high severe
Benchmarking Entropy Coding Performance/Huffman encoding Biased
Benchmarking Entropy Coding Performance/Huffman encoding Biased: Warming up for 3.0000 s
Benchmarking Entropy Coding Performance/Huffman encoding Biased: Collecting 100 samples in estimated 5.5757 s (25k iterations)
Benchmarking Entropy Coding Performance/Huffman encoding Biased: Analyzing
Entropy Coding Performance/Huffman encoding Biased
                        time:   [220.79 µs 221.14 µs 221.58 µs]
                        thrpt:  [55.952 MiB/s 56.062 MiB/s 56.153 MiB/s]
                 change:
                        time:   [-20.129% -19.698% -19.340%] (p = 0.00 < 0.05)
                        thrpt:  [+23.978% +24.530% +25.201%]
                        Performance has improved.
Found 12 outliers among 100 measurements (12.00%)
  6 (6.00%) high mild
  6 (6.00%) high severe
Benchmarking Entropy Coding Performance/Entropy calculation Text
Benchmarking Entropy Coding Performance/Entropy calculation Text: Warming up for 3.0000 s
Benchmarking Entropy Coding Performance/Entropy calculation Text: Collecting 100 samples in estimated 5.0002 s (1.2M iterations)
Benchmarking Entropy Coding Performance/Entropy calculation Text: Analyzing
Entropy Coding Performance/Entropy calculation Text
                        time:   [4.1475 µs 4.1518 µs 4.1569 µs]
                        thrpt:  [2.0164 GiB/s 2.0188 GiB/s 2.0209 GiB/s]
Found 4 outliers among 100 measurements (4.00%)
  2 (2.00%) high mild
  2 (2.00%) high severe
Benchmarking Entropy Coding Performance/Huffman tree construction Text
Benchmarking Entropy Coding Performance/Huffman tree construction Text: Warming up for 3.0000 s
Benchmarking Entropy Coding Performance/Huffman tree construction Text: Collecting 100 samples in estimated 5.0066 s (561k iterations)
Benchmarking Entropy Coding Performance/Huffman tree construction Text: Analyzing
Entropy Coding Performance/Huffman tree construction Text
                        time:   [8.7858 µs 8.7965 µs 8.8089 µs]
                        thrpt:  [974.36 MiB/s 975.74 MiB/s 976.93 MiB/s]
Found 10 outliers among 100 measurements (10.00%)
  5 (5.00%) high mild
  5 (5.00%) high severe
Benchmarking Entropy Coding Performance/Huffman encoding Text
Benchmarking Entropy Coding Performance/Huffman encoding Text: Warming up for 3.0000 s
Benchmarking Entropy Coding Performance/Huffman encoding Text: Collecting 100 samples in estimated 5.4688 s (20k iterations)
Benchmarking Entropy Coding Performance/Huffman encoding Text: Analyzing
Entropy Coding Performance/Huffman encoding Text
                        time:   [271.52 µs 271.95 µs 272.44 µs]
                        thrpt:  [31.504 MiB/s 31.562 MiB/s 31.611 MiB/s]
Found 10 outliers among 100 measurements (10.00%)
  4 (4.00%) high mild
  6 (6.00%) high severe

Benchmarking Cache Efficiency Analysis/Rust FastVec sequential/1024
Benchmarking Cache Efficiency Analysis/Rust FastVec sequential/1024: Warming up for 3.0000 s
Benchmarking Cache Efficiency Analysis/Rust FastVec sequential/1024: Collecting 100 samples in estimated 5.0005 s (30M iterations)
Benchmarking Cache Efficiency Analysis/Rust FastVec sequential/1024: Analyzing
Cache Efficiency Analysis/Rust FastVec sequential/1024
                        time:   [167.18 ns 167.56 ns 168.03 ns]
                        thrpt:  [6.0941 Gelem/s 6.1114 Gelem/s 6.1250 Gelem/s]
Found 8 outliers among 100 measurements (8.00%)
  5 (5.00%) high mild
  3 (3.00%) high severe
Benchmarking Cache Efficiency Analysis/C++ valvec sequential/1024
Benchmarking Cache Efficiency Analysis/C++ valvec sequential/1024: Warming up for 3.0000 s
Benchmarking Cache Efficiency Analysis/C++ valvec sequential/1024: Collecting 100 samples in estimated 5.0125 s (1.7M iterations)
Benchmarking Cache Efficiency Analysis/C++ valvec sequential/1024: Analyzing
Cache Efficiency Analysis/C++ valvec sequential/1024
                        time:   [2.8732 µs 2.8758 µs 2.8788 µs]
                        thrpt:  [355.70 Melem/s 356.08 Melem/s 356.40 Melem/s]
Found 7 outliers among 100 measurements (7.00%)
  3 (3.00%) high mild
  4 (4.00%) high severe
Benchmarking Cache Efficiency Analysis/Rust FastVec sequential/16384
Benchmarking Cache Efficiency Analysis/Rust FastVec sequential/16384: Warming up for 3.0000 s
Benchmarking Cache Efficiency Analysis/Rust FastVec sequential/16384: Collecting 100 samples in estimated 5.0066 s (1.9M iterations)
Benchmarking Cache Efficiency Analysis/Rust FastVec sequential/16384: Analyzing
Cache Efficiency Analysis/Rust FastVec sequential/16384
                        time:   [2.5714 µs 2.5768 µs 2.5833 µs]
                        thrpt:  [6.3423 Gelem/s 6.3582 Gelem/s 6.3715 Gelem/s]
Found 12 outliers among 100 measurements (12.00%)
  5 (5.00%) high mild
  7 (7.00%) high severe
Benchmarking Cache Efficiency Analysis/C++ valvec sequential/16384
Benchmarking Cache Efficiency Analysis/C++ valvec sequential/16384: Warming up for 3.0000 s
Benchmarking Cache Efficiency Analysis/C++ valvec sequential/16384: Collecting 100 samples in estimated 5.1390 s (111k iterations)
Benchmarking Cache Efficiency Analysis/C++ valvec sequential/16384: Analyzing
Cache Efficiency Analysis/C++ valvec sequential/16384
                        time:   [46.054 µs 46.163 µs 46.271 µs]
                        thrpt:  [354.09 Melem/s 354.92 Melem/s 355.76 Melem/s]
Found 8 outliers among 100 measurements (8.00%)
  6 (6.00%) high mild
  2 (2.00%) high severe
Benchmarking Cache Efficiency Analysis/Rust FastVec sequential/262144
Benchmarking Cache Efficiency Analysis/Rust FastVec sequential/262144: Warming up for 3.0000 s
Benchmarking Cache Efficiency Analysis/Rust FastVec sequential/262144: Collecting 100 samples in estimated 5.1805 s (121k iterations)
Benchmarking Cache Efficiency Analysis/Rust FastVec sequential/262144: Analyzing
Cache Efficiency Analysis/Rust FastVec sequential/262144
                        time:   [42.132 µs 42.226 µs 42.338 µs]
                        thrpt:  [6.1918 Gelem/s 6.2082 Gelem/s 6.2220 Gelem/s]
Found 6 outliers among 100 measurements (6.00%)
  6 (6.00%) high severe
Benchmarking Cache Efficiency Analysis/C++ valvec sequential/262144
Benchmarking Cache Efficiency Analysis/C++ valvec sequential/262144: Warming up for 3.0000 s
Benchmarking Cache Efficiency Analysis/C++ valvec sequential/262144: Collecting 100 samples in estimated 7.4656 s (10k iterations)
Benchmarking Cache Efficiency Analysis/C++ valvec sequential/262144: Analyzing
Cache Efficiency Analysis/C++ valvec sequential/262144
                        time:   [736.32 µs 737.58 µs 739.19 µs]
                        thrpt:  [354.63 Melem/s 355.41 Melem/s 356.02 Melem/s]
Found 10 outliers among 100 measurements (10.00%)
  3 (3.00%) high mild
  7 (7.00%) high severe

Benchmarking Allocation Pattern Analysis/Rust allocation 100x64
Benchmarking Allocation Pattern Analysis/Rust allocation 100x64: Warming up for 3.0000 s
Benchmarking Allocation Pattern Analysis/Rust allocation 100x64: Collecting 100 samples in estimated 5.0103 s (1.2M iterations)
Benchmarking Allocation Pattern Analysis/Rust allocation 100x64: Analyzing
Allocation Pattern Analysis/Rust allocation 100x64
                        time:   [4.1852 µs 4.1995 µs 4.2170 µs]
                        thrpt:  [23.714 Melem/s 23.812 Melem/s 23.894 Melem/s]
Found 8 outliers among 100 measurements (8.00%)
  3 (3.00%) high mild
  5 (5.00%) high severe
Benchmarking Allocation Pattern Analysis/C++ allocation 100x64
Benchmarking Allocation Pattern Analysis/C++ allocation 100x64: Warming up for 3.0000 s
Benchmarking Allocation Pattern Analysis/C++ allocation 100x64: Collecting 100 samples in estimated 5.0045 s (2.9M iterations)
Benchmarking Allocation Pattern Analysis/C++ allocation 100x64: Analyzing
Allocation Pattern Analysis/C++ allocation 100x64
                        time:   [1.7378 µs 1.7393 µs 1.7409 µs]
                        thrpt:  [57.440 Melem/s 57.496 Melem/s 57.545 Melem/s]
Found 4 outliers among 100 measurements (4.00%)
  3 (3.00%) high mild
  1 (1.00%) high severe
Benchmarking Allocation Pattern Analysis/Rust allocation 1000x64
Benchmarking Allocation Pattern Analysis/Rust allocation 1000x64: Warming up for 3.0000 s
Benchmarking Allocation Pattern Analysis/Rust allocation 1000x64: Collecting 100 samples in estimated 5.0034 s (101k iterations)
Benchmarking Allocation Pattern Analysis/Rust allocation 1000x64: Analyzing
Allocation Pattern Analysis/Rust allocation 1000x64
                        time:   [49.164 µs 49.233 µs 49.304 µs]
                        thrpt:  [20.282 Melem/s 20.312 Melem/s 20.340 Melem/s]
Found 6 outliers among 100 measurements (6.00%)
  4 (4.00%) low mild
  1 (1.00%) high mild
  1 (1.00%) high severe
Benchmarking Allocation Pattern Analysis/C++ allocation 1000x64
Benchmarking Allocation Pattern Analysis/C++ allocation 1000x64: Warming up for 3.0000 s
Benchmarking Allocation Pattern Analysis/C++ allocation 1000x64: Collecting 100 samples in estimated 5.0479 s (146k iterations)
Benchmarking Allocation Pattern Analysis/C++ allocation 1000x64: Analyzing
Allocation Pattern Analysis/C++ allocation 1000x64
                        time:   [34.431 µs 34.539 µs 34.686 µs]
                        thrpt:  [28.830 Melem/s 28.953 Melem/s 29.044 Melem/s]
Found 11 outliers among 100 measurements (11.00%)
  1 (1.00%) low mild
  8 (8.00%) high mild
  2 (2.00%) high severe
Benchmarking Allocation Pattern Analysis/Rust allocation 100x1024
Benchmarking Allocation Pattern Analysis/Rust allocation 100x1024: Warming up for 3.0000 s
Benchmarking Allocation Pattern Analysis/Rust allocation 100x1024: Collecting 100 samples in estimated 5.0026 s (202k iterations)
Benchmarking Allocation Pattern Analysis/Rust allocation 100x1024: Analyzing
Allocation Pattern Analysis/Rust allocation 100x1024
                        time:   [24.416 µs 24.489 µs 24.572 µs]
                        thrpt:  [4.0697 Melem/s 4.0835 Melem/s 4.0956 Melem/s]
Found 4 outliers among 100 measurements (4.00%)
  2 (2.00%) high mild
  2 (2.00%) high severe
Benchmarking Allocation Pattern Analysis/C++ allocation 100x1024
Benchmarking Allocation Pattern Analysis/C++ allocation 100x1024: Warming up for 3.0000 s
Benchmarking Allocation Pattern Analysis/C++ allocation 100x1024: Collecting 100 samples in estimated 5.0174 s (1.1M iterations)
Benchmarking Allocation Pattern Analysis/C++ allocation 100x1024: Analyzing
Allocation Pattern Analysis/C++ allocation 100x1024
                        time:   [4.3540 µs 4.3596 µs 4.3657 µs]
                        thrpt:  [22.906 Melem/s 22.938 Melem/s 22.967 Melem/s]
Found 7 outliers among 100 measurements (7.00%)
  4 (4.00%) high mild
  3 (3.00%) high severe
Benchmarking Allocation Pattern Analysis/Rust allocation 1000x1024
Benchmarking Allocation Pattern Analysis/Rust allocation 1000x1024: Warming up for 3.0000 s
Benchmarking Allocation Pattern Analysis/Rust allocation 1000x1024: Collecting 100 samples in estimated 6.0094 s (25k iterations)
Benchmarking Allocation Pattern Analysis/Rust allocation 1000x1024: Analyzing
Allocation Pattern Analysis/Rust allocation 1000x1024
                        time:   [236.82 µs 237.18 µs 237.58 µs]
                        thrpt:  [4.2090 Melem/s 4.2163 Melem/s 4.2226 Melem/s]
Found 8 outliers among 100 measurements (8.00%)
  4 (4.00%) high mild
  4 (4.00%) high severe
Benchmarking Allocation Pattern Analysis/C++ allocation 1000x1024
Benchmarking Allocation Pattern Analysis/C++ allocation 1000x1024: Warming up for 3.0000 s
Benchmarking Allocation Pattern Analysis/C++ allocation 1000x1024: Collecting 100 samples in estimated 5.2128 s (121k iterations)
Benchmarking Allocation Pattern Analysis/C++ allocation 1000x1024: Analyzing
Allocation Pattern Analysis/C++ allocation 1000x1024
                        time:   [42.960 µs 43.072 µs 43.215 µs]
                        thrpt:  [23.140 Melem/s 23.217 Melem/s 23.278 Melem/s]
Found 5 outliers among 100 measurements (5.00%)
  2 (2.00%) high mild
  3 (3.00%) high severe
Benchmarking Allocation Pattern Analysis/Rust allocation 100x16384
Benchmarking Allocation Pattern Analysis/Rust allocation 100x16384: Warming up for 3.0000 s
Benchmarking Allocation Pattern Analysis/Rust allocation 100x16384: Collecting 100 samples in estimated 5.9508 s (20k iterations)
Benchmarking Allocation Pattern Analysis/Rust allocation 100x16384: Analyzing
Allocation Pattern Analysis/Rust allocation 100x16384
                        time:   [294.57 µs 295.01 µs 295.58 µs]
                        thrpt:  [338.32 Kelem/s 338.97 Kelem/s 339.48 Kelem/s]
Found 9 outliers among 100 measurements (9.00%)
  1 (1.00%) low mild
  5 (5.00%) high mild
  3 (3.00%) high severe
Benchmarking Allocation Pattern Analysis/C++ allocation 100x16384
Benchmarking Allocation Pattern Analysis/C++ allocation 100x16384: Warming up for 3.0000 s
Benchmarking Allocation Pattern Analysis/C++ allocation 100x16384: Collecting 100 samples in estimated 5.0056 s (1.4M iterations)
Benchmarking Allocation Pattern Analysis/C++ allocation 100x16384: Analyzing
Allocation Pattern Analysis/C++ allocation 100x16384
                        time:   [3.7516 µs 3.7708 µs 3.7888 µs]
                        thrpt:  [26.394 Melem/s 26.519 Melem/s 26.655 Melem/s]
Found 1 outliers among 100 measurements (1.00%)
  1 (1.00%) high mild
Benchmarking Allocation Pattern Analysis/Rust allocation 1000x16384
Benchmarking Allocation Pattern Analysis/Rust allocation 1000x16384: Warming up for 3.0000 s
Benchmarking Allocation Pattern Analysis/Rust allocation 1000x16384: Collecting 100 samples in estimated 5.0224 s (1700 iterations)
Benchmarking Allocation Pattern Analysis/Rust allocation 1000x16384: Analyzing
Allocation Pattern Analysis/Rust allocation 1000x16384
                        time:   [2.9505 ms 2.9558 ms 2.9622 ms]
                        thrpt:  [337.59 Kelem/s 338.31 Kelem/s 338.93 Kelem/s]
Found 8 outliers among 100 measurements (8.00%)
  5 (5.00%) high mild
  3 (3.00%) high severe
Benchmarking Allocation Pattern Analysis/C++ allocation 1000x16384
Benchmarking Allocation Pattern Analysis/C++ allocation 1000x16384: Warming up for 3.0000 s
Benchmarking Allocation Pattern Analysis/C++ allocation 1000x16384: Collecting 100 samples in estimated 5.0342 s (162k iterations)
Benchmarking Allocation Pattern Analysis/C++ allocation 1000x16384: Analyzing
Allocation Pattern Analysis/C++ allocation 1000x16384
                        time:   [31.061 µs 31.107 µs 31.162 µs]
                        thrpt:  [32.090 Melem/s 32.147 Melem/s 32.195 Melem/s]
Found 12 outliers among 100 measurements (12.00%)
  6 (6.00%) high mild
  6 (6.00%) high severe

Benchmarking Hash Function Performance/Rust FastStr hash 8B
Benchmarking Hash Function Performance/Rust FastStr hash 8B: Warming up for 3.0000 s
Benchmarking Hash Function Performance/Rust FastStr hash 8B: Collecting 100 samples in estimated 5.0000 s (998M iterations)
