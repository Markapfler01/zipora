name: Release

on:
  push:
    tags:
      - 'v*.*.*'

env:
  CARGO_TERM_COLOR: always

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      release_version: ${{ env.RELEASE_VERSION }}
    steps:
    - name: Get release version from tag
      run: |
        echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        echo "version is: ${{ env.RELEASE_VERSION }}"

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ env.RELEASE_VERSION }}
        release_name: ${{ env.RELEASE_VERSION }}
        body: |
          Changes in this release:
          - See [CHANGELOG.md](CHANGELOG.md) for details
        draft: false
        prerelease: false

  build-release:
    name: Build Release
    needs: create-release
    runs-on: ${{ matrix.job.os }}
    strategy:
      fail-fast: false
      matrix:
        job:
          - { os: ubuntu-latest,   target: x86_64-unknown-linux-gnu,    use-cross: false }
          - { os: ubuntu-latest,   target: x86_64-unknown-linux-musl,   use-cross: true }
          - { os: ubuntu-latest,   target: aarch64-unknown-linux-gnu,   use-cross: true }
          - { os: macos-latest,    target: x86_64-apple-darwin,         use-cross: false }
          - { os: macos-latest,    target: aarch64-apple-darwin,        use-cross: false }
          - { os: windows-latest,  target: x86_64-pc-windows-msvc,      use-cross: false }

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        targets: ${{ matrix.job.target }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.job.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config

    - name: Install cross
      if: matrix.job.use-cross
      run: cargo install cross

    - name: Build release binary
      run: |
        if [[ "${{ matrix.job.use-cross }}" == "true" ]]; then
          cross build --release --target ${{ matrix.job.target }}
        else
          cargo build --release --target ${{ matrix.job.target }}
        fi

    - name: Create release archive
      shell: bash
      run: |
        staging="zipora-${{ needs.create-release.outputs.release_version }}-${{ matrix.job.target }}"
        mkdir -p "$staging"

        # Copy files
        cp {README.md,LICENSE*,CHANGELOG.md} "$staging/"
        
        if [[ "${{ matrix.job.os }}" == "windows-latest" ]]; then
          cp "target/${{ matrix.job.target }}/release/zipora.exe" "$staging/"
          cd "$staging"
          7z a "../$staging.zip" .
          echo "ASSET=$staging.zip" >> $GITHUB_ENV
        else
          cp "target/${{ matrix.job.target }}/release/zipora" "$staging/" 2>/dev/null || echo "No binary to copy"
          tar czf "$staging.tar.gz" -C "$staging" .
          echo "ASSET=$staging.tar.gz" >> $GITHUB_ENV
        fi

    - name: Upload release archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create-release.outputs.upload_url }}
        asset_path: ${{ env.ASSET }}
        asset_name: ${{ env.ASSET }}
        asset_content_type: application/octet-stream

  publish-crate:
    name: Publish to crates.io
    needs: create-release
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential pkg-config

    - name: Verify crate
      run: cargo package --verbose

    - name: Publish to crates.io
      run: cargo publish --token ${{ secrets.CARGO_REGISTRY_TOKEN }}